record(bi, "MR1K2:MMS:YLEFT:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "MR1K2:MMS:YLEFT:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "MR1K2:MMS:YLEFT:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "MR1K2:MMS:YLEFT:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YLEFT:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YLEFT:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YLEFT:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:YLEFT:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nCommand?")
}

record(longout, "MR1K2:MMS:YLEFT:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.nCommand=")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:YLEFT:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nCmdData?")
}

record(longout, "MR1K2:MMS:YLEFT:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.nCmdData=")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "MR1K2:MMS:YLEFT:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YLEFT:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YLEFT:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YLEFT:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YLEFT:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YLEFT:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YLEFT:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YLEFT:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YLEFT:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YLEFT:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(longin, "MR1K2:MMS:YLEFT:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nMotionAxisID?")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YLEFT:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "MR1K2:MMS:YLEFT:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.nErrorId?")
}

record(waveform, "MR1K2:MMS:YLEFT:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "MR1K2:MMS:YRIGHT:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "MR1K2:MMS:YRIGHT:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "MR1K2:MMS:YRIGHT:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YRIGHT:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YRIGHT:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:YRIGHT:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:YRIGHT:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nCommand?")
}

record(longout, "MR1K2:MMS:YRIGHT:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.nCommand=")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:YRIGHT:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nCmdData?")
}

record(longout, "MR1K2:MMS:YRIGHT:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.nCmdData=")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "MR1K2:MMS:YRIGHT:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YRIGHT:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YRIGHT:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YRIGHT:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YRIGHT:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YRIGHT:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YRIGHT:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YRIGHT:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:YRIGHT:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:YRIGHT:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M2.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(longin, "MR1K2:MMS:YRIGHT:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nMotionAxisID?")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:YRIGHT:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "MR1K2:MMS:YRIGHT:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.nErrorId?")
}

record(waveform, "MR1K2:MMS:YRIGHT:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M2.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "MR1K2:MMS:XUP:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "MR1K2:MMS:XUP:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "MR1K2:MMS:XUP:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "MR1K2:MMS:XUP:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "MR1K2:MMS:XUP:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XUP:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:XUP:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XUP:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:XUP:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XUP:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:XUP:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nCommand?")
}

record(longout, "MR1K2:MMS:XUP:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.nCommand=")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:XUP:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nCmdData?")
}

record(longout, "MR1K2:MMS:XUP:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.nCmdData=")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "MR1K2:MMS:XUP:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XUP:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XUP:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XUP:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XUP:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XUP:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XUP:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XUP:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XUP:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XUP:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M3.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(longin, "MR1K2:MMS:XUP:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nMotionAxisID?")
}

record(bi, "MR1K2:MMS:XUP:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XUP:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "MR1K2:MMS:XUP:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.nErrorId?")
}

record(waveform, "MR1K2:MMS:XUP:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M3.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "MR1K2:MMS:XDWN:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "MR1K2:MMS:XDWN:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "MR1K2:MMS:XDWN:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XDWN:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XDWN:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:XDWN:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:XDWN:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nCommand?")
}

record(longout, "MR1K2:MMS:XDWN:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.nCommand=")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:XDWN:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nCmdData?")
}

record(longout, "MR1K2:MMS:XDWN:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.nCmdData=")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "MR1K2:MMS:XDWN:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XDWN:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XDWN:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XDWN:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XDWN:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XDWN:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XDWN:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XDWN:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:XDWN:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:XDWN:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M4.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(longin, "MR1K2:MMS:XDWN:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nMotionAxisID?")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:XDWN:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "MR1K2:MMS:XDWN:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.nErrorId?")
}

record(waveform, "MR1K2:MMS:XDWN:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M4.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "MR1K2:MMS:PITCH:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "MR1K2:MMS:PITCH:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "MR1K2:MMS:PITCH:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:PITCH:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:PITCH:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "MR1K2:MMS:PITCH:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:PITCH:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nCommand?")
}

record(longout, "MR1K2:MMS:PITCH:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.nCommand=")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "MR1K2:MMS:PITCH:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nCmdData?")
}

record(longout, "MR1K2:MMS:PITCH:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.nCmdData=")
  info(autosaveFields_pass0, "VAL")
}

record(ai, "MR1K2:MMS:PITCH:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:PITCH:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:PITCH:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:PITCH:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:PITCH:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:PITCH:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:PITCH:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:PITCH:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(ai, "MR1K2:MMS:PITCH:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ao, "MR1K2:MMS:PITCH:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M5.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC VAL")
}

record(longin, "MR1K2:MMS:PITCH:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nMotionAxisID?")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "MR1K2:MMS:PITCH:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "MR1K2:MMS:PITCH:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.nErrorId?")
}

record(waveform, "MR1K2:MMS:PITCH:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M5.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "MR1K2:COUPLE_Y_RBV") {
  field(DESC, "ads:MAIN.M1K2.bExecuteCoupleY")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bExecuteCoupleY?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(bo, "MR1K2:COUPLE_Y") {
  field(DESC, "ads:MAIN.M1K2.bExecuteCoupleY")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1K2.bExecuteCoupleY=")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:DECOUPLE_Y_RBV") {
  field(DESC, "ads:MAIN.M1K2.bExecuteDecoupleY")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bExecuteDecoupleY?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(bo, "MR1K2:DECOUPLE_Y") {
  field(DESC, "ads:MAIN.M1K2.bExecuteDecoupleY")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1K2.bExecuteDecoupleY=")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:COUPLE_X_RBV") {
  field(DESC, "ads:MAIN.M1K2.bExecuteCoupleX")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bExecuteCoupleX?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(bo, "MR1K2:COUPLE_X") {
  field(DESC, "ads:MAIN.M1K2.bExecuteCoupleX")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1K2.bExecuteCoupleX=")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:DECOUPLE_X_RBV") {
  field(DESC, "ads:MAIN.M1K2.bExecuteDecoupleX")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bExecuteDecoupleX?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(bo, "MR1K2:DECOUPLE_X") {
  field(DESC, "ads:MAIN.M1K2.bExecuteDecoupleX")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1K2.bExecuteDecoupleX=")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "MR1K2:ALREADY_COUPLED_Y_RBV") {
  field(DESC, "ads:MAIN.M1K2.bGantryAlreadyCoupledY")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bGantryAlreadyCoupledY?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(bi, "MR1K2:ALREADY_COUPLED_X_RBV") {
  field(DESC, "ads:MAIN.M1K2.bGantryAlreadyCoupledX")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.bGantryAlreadyCoupledX?")
  field(ZNAM, "Zero")
  field(ONAM, "One")
}

record(ai, "MR1K2:GANTRY_Y_RBV") {
  field(DESC, "ads:MAIN.M1K2.fCurrGantryY_um")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.fCurrGantryY_um?")
  field(PREC, "3")
  field(EGU, "um")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:GANTRY_X_RBV") {
  field(DESC, "ads:MAIN.M1K2.fCurrGantryX_um")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1K2.fCurrGantryX_um?")
  field(PREC, "3")
  field(EGU, "um")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:Y:MEAN_RBV") {
  field(DESC, "ads:MAIN.fbYRMSErrorM1K2.fEncMean")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbYRMSErrorM1K2.fEncMean?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:Y:STDEV_RBV") {
  field(DESC, "ads:MAIN.fbYRMSErrorM1K2.fEncStDev")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbYRMSErrorM1K2.fEncStDev?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:Y:RMS_RBV") {
  field(DESC, "ads:MAIN.fbYRMSErrorM1K2.fCurrRMSError")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbYRMSErrorM1K2.fCurrRMSError?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(waveform, "MR1K2:ENC:Y:ACTPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbYRMSErrorM1K2.aEncActPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbYRMSErrorM1K2.aEncActPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}

record(waveform, "MR1K2:ENC:Y:SETPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbYRMSErrorM1K2.aEncSetPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbYRMSErrorM1K2.aEncSetPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}

record(ai, "MR1K2:ENC:X:MEAN_RBV") {
  field(DESC, "ads:MAIN.fbXRMSErrorM1K2.fEncMean")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbXRMSErrorM1K2.fEncMean?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:X:STDEV_RBV") {
  field(DESC, "ads:MAIN.fbXRMSErrorM1K2.fEncStDev")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbXRMSErrorM1K2.fEncStDev?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:X:RMS_RBV") {
  field(DESC, "ads:MAIN.fbXRMSErrorM1K2.fCurrRMSError")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbXRMSErrorM1K2.fCurrRMSError?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(waveform, "MR1K2:ENC:X:ACTPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbXRMSErrorM1K2.aEncActPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbXRMSErrorM1K2.aEncActPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}

record(waveform, "MR1K2:ENC:X:SETPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbXRMSErrorM1K2.aEncSetPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbXRMSErrorM1K2.aEncSetPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}

record(ai, "MR1K2:ENC:PITCH:MEAN_RBV") {
  field(DESC, "ads:MAIN.fbPitchRMSErrorM1K2.fEncMean")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbPitchRMSErrorM1K2.fEncMean?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:PITCH:STDEV_RBV") {
  field(DESC, "ads:MAIN.fbPitchRMSErrorM1K2.fEncStDev")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbPitchRMSErrorM1K2.fEncStDev?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(ai, "MR1K2:ENC:PITCH:RMS_RBV") {
  field(DESC, "ads:MAIN.fbPitchRMSE...1K2.fCurrRMSError")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbPitchRMSErrorM1K2.fCurrRMSError?")
  field(PREC, "3")
  info(autosaveFields_pass0, "PREC")
}

record(waveform, "MR1K2:ENC:PITCH:ACTPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbPitchRMSErrorM1K2.aEncActPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbPitchRMSErrorM1K2.aEncActPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}

record(waveform, "MR1K2:ENC:PITCH:SETPOSARRAY_RBV") {
  field(DESC, "ads:MAIN.fbPitchRMSErrorM1K2.aEncSetPos")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbPitchRMSErrorM1K2.aEncSetPos?")
  field(FTVL, "DOUBLE")
  field(NELM, "1000")
}